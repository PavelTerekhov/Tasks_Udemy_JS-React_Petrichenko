// Task 1. Задание на создание правильных переменных

// 1) Создайте переменную, которая будет отображать имя пользователя. (Пользователь - user, имя - name). В неё поместите значение "John"
// 2) На следующей строке создайте переменную, отображающую номер пользователя (номер - number). В неё поместите значение 25.
// 3) Измените значение второй переменной с 25 на 24 на следующей строке.

let userName,
    userNumber;
userName = "John";
userNumber  = 25;
userNumber = 24;


// Task 2. Задание на создание правильных типов данных

// 1) Создайте переменную с названием магазина (магазин - store, имя - name) и поместите в неё любое название на ваш выбор.
// 2) Создайте объект под названием storeDescription
// 3) Во внутрь этого объекта напрямую поместите свойство budget и укажите его как 10000. Напрямую - это сразу внутри фигурных скобок, мы его расширяем на месте
// 4) Во внутрь объекта storeDescription напрямую поместите свойство employees. Это должен быть массив, который содержит имена трех сотрудников на ваш выбор
// 5) Во внутрь объекта storeDescription напрямую поместите свойство products. Это должен быть тоже объект, который содержит два товара и их цену. То есть, нужно создать пару ключ-значение в виде товар: цена Данные на ваш выбор.
// 6) Во внутрь объекта storeDescription напрямую поместите свойство open. Тут можно контролировать: или магазин открыт, или закрыт, то есть логическое значение. Сделайте его открытым

const storeName = "Micran";
const storeDescription = {
        budget: 10000,
    emploees: ["Yulke", "Dasha", "Orbit"],
    product: {
        diod: 10000,
        transistor: 50000
    },
    open:true
}

// Task 3. Задания на использование циклов и условий

// 1) При помощи цикла выведите числа от 5 до 10 в консоль. 5 и 10 включительно. Цикл можно использовать любой
// 2) При помощи цикла for вывести числа от 20 до 10 в консоль. В обратном порядке (20, 19, 18...). Когда цикл дойдет до числа 13 - остановить весь цикл
// 3) При помощи цикла for выведите чётные числа от 2 до 10 включительно
// 4) Перепишите цикл  for на вариант с while. Результат должен остаться точно таким же. Не создайте бесконечный цикл! Иначе браузер может зависнуть.

//  Цикл, который нужно переписать:
//  for (let i = 2; i <= 16; i++) {
//      if (i % 2 === 0) {
//          continue;
//      } else {
//          console.log(i);
//      }
//  }
// 5) Заполните массив цифрами от 5 до 10 включительно. Помните, что элементы массива можно сформировать так же, как и обращаться к ним: arr[0]

// Место для первой задачи
function firstTask() {
    // Пишем решение вот тут
    for (let i=5; i<=10; i++) {
        console.log(i);
     }
    }
firstTask();
// Место для второй задачи
function secondTask() {
    // Пишем решение вот тут
    for (let i = 20; i >= 10; i--) {
        if (i === 13) break;  
        console.log(i);
    }
}
secondTask();
// Место для третьей задачи
function thirdTask() {
    // Пишем решение вот тут
    for (let i = 2; i <= 10; i++) {
    if (i % 2 === 0) { 
    console.log(i);
        }
    }
}
thirdTask();
// Место для четвертой задачи

// Цикл, который нужно переписать:
// for (let i = 2; i <= 16; i++) {
//     if (i % 2 === 0) {
//         continue;
//     } else {
//         console.log(i);
//     }
// }

function fourthTask() {
    // Пишем решение вот тут
let i = 2;
while (i < 16) {
    i++;
    if (i % 2 === 0) {continue} 
    else {console.log(i);}
    }
}
fourthTask();
// Место для пятой задачи
function fifthTask() {
   const arrayOfNumbers = [];
   // Пишем решение вот тут
   for (let i = 5; i <= 10; i++) {
   arrayOfNumbers[i - 5] = i;
   }
   console.log(arrayOfNumbers);
   // Не трогаем
   return arrayOfNumbers;
}
fifthTask();

// Task 4. (*) Продвинутые задания на использование циклов и условий

// 1) Заполните новый массив (result) числами из старого (arr). Количество элементов в массиве можно получить как arr.length, а к элементам обращаемся все так же: arr[0], arr[1] и тд. Должен получиться точно такой же массив.
// 2) Измените данный массив так, чтобы все числа были увеличены в 2 раза, а если попадается строка строка - то к ней было добавлено " - done".
// Для определения типа данных используйте typeof();
// Должно получиться: [ 10, 20, 'Shopping - done', 40, 'Homework - done' ]
// 3) Разверните массив data наоборот при помощи цикла и запишите данные в массив result.
// Должно получиться: [ 'Homework', 20, 'Shopping', 10, 5 ]

// Место для первой задачи
function firstTask() {
    // Значения массива менять нельзя, тут он проверяется автоматически именно на эти значения
    const arr = [3, 5, 8, 16, 20, 23, 50];
    const result = []; 
    for (let i = 0; i < arr.length; i++) {
        result[i] = arr[i]
    }
    // Пишем решение вот тут   
    console.log(result);
    // Не трогаем
    return result;
 }
 firstTask(); 
 // Место для второй задачи
 function secondTask() {
     // Значения массива менять нельзя, тут он проверяется автоматически именно на эти значения
     const data = [5, 10, 'Shopping', 20, 'Homework']; 
     // Пишем решение вот тут
     for (let i = 0; i < data.length; i++) {
         if (typeof(data[i]) === 'number') {
             data[i] = data[i] * 2
         } else if (typeof(data[i]) === 'string') {
             data[i] = `${data[i]} - done`
         }
     }
     console.log(data);
     // Не трогаем
     return data;
 }
 secondTask(); 
 // Место для третьей задачи
 function thirdTask() {
     const data = [5, 10, 'Shopping', 20, 'Homework'];
     const result = []; 
     for (let i = 1; i <= data.length; i++) {
         result[i - 1] = data[data.length - i]
     } 
     console.log(result);
     return result;
 } 
 thirdTask();

// Task 5. Задача на формирование фигуры

// Это одна из классических задач в программировании на формирование самых разных фигур при помощи кода. Вы спросите, а зачем это вообще нужно? Ответов несколько:
// Существуют реальные задачи, когда вы кодом строите геометрию, символы и другие нужные вещи. Вспомните простые электронные табло на улицах, например
// Это хорошо прокачивает логику и разминает мозг
// Позволяет запомнить нюансы работы языка
// Иногда можно встретить просто нереальные вещи, построенные только при помощи кода. Но мы с вами займемся базовой фигурой. Сейчас вам необходимо написать код, который при помощи звездочек (*) в консоли нарисует вот такую фигуру:
//      *
//     ***
//    *****
//   *******
//  *********
// ***********
// (Подсказка: в конце фигуры есть перенос строки \n, который тоже учитывается в тестах. В КОНЦЕ КАЖДОЙ СТРОКИ НЕТ ПРОБЕЛОВ, ТОЛЬКО ПЕРЕНОС)

const lines = 5;
let result = '';
for (let i = 0; i <= lines; i++) {
    for (let j = 0; j < lines - i; j++) {
        result += " ";
    }
    for (let j = 0; j < 2 * i + 1; j++) {
        result += "*";
    }
    result += "\n";
}
console.log(result);

