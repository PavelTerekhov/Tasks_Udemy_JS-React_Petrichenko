// Task 1. Задание на создание правильных переменных

// 1) Создайте переменную, которая будет отображать имя пользователя. (Пользователь - user, имя - name). В неё поместите значение "John"
// 2) На следующей строке создайте переменную, отображающую номер пользователя (номер - number). В неё поместите значение 25.
// 3) Измените значение второй переменной с 25 на 24 на следующей строке.

let userName,
    userNumber;
userName = "John";
userNumber  = 25;
userNumber = 24;


// Task 2. Задание на создание правильных типов данных

// 1) Создайте переменную с названием магазина (магазин - store, имя - name) и поместите в неё любое название на ваш выбор.
// 2) Создайте объект под названием storeDescription
// 3) Во внутрь этого объекта напрямую поместите свойство budget и укажите его как 10000. Напрямую - это сразу внутри фигурных скобок, мы его расширяем на месте
// 4) Во внутрь объекта storeDescription напрямую поместите свойство employees. Это должен быть массив, который содержит имена трех сотрудников на ваш выбор
// 5) Во внутрь объекта storeDescription напрямую поместите свойство products. Это должен быть тоже объект, который содержит два товара и их цену. То есть, нужно создать пару ключ-значение в виде товар: цена Данные на ваш выбор.
// 6) Во внутрь объекта storeDescription напрямую поместите свойство open. Тут можно контролировать: или магазин открыт, или закрыт, то есть логическое значение. Сделайте его открытым

const storeName = "Micran";
const storeDescription = {
        budget: 10000,
    emploees: ["Yulke", "Dasha", "Orbit"],
    product: {
        diod: 10000,
        transistor: 50000
    },
    open:true
}

// Task 3. Задания на использование циклов и условий

// 1) При помощи цикла выведите числа от 5 до 10 в консоль. 5 и 10 включительно. Цикл можно использовать любой
// 2) При помощи цикла for вывести числа от 20 до 10 в консоль. В обратном порядке (20, 19, 18...). Когда цикл дойдет до числа 13 - остановить весь цикл
// 3) При помощи цикла for выведите чётные числа от 2 до 10 включительно
// 4) Перепишите цикл  for на вариант с while. Результат должен остаться точно таким же. Не создайте бесконечный цикл! Иначе браузер может зависнуть.

//  Цикл, который нужно переписать:
//  for (let i = 2; i <= 16; i++) {
//      if (i % 2 === 0) {
//          continue;
//      } else {
//          console.log(i);
//      }
//  }
// 5) Заполните массив цифрами от 5 до 10 включительно. Помните, что элементы массива можно сформировать так же, как и обращаться к ним: arr[0]

// Место для первой задачи
function firstTask() {
    // Пишем решение вот тут
    for (let i=5; i<=10; i++) {
        console.log(i);
     }
    }
firstTask();
// Место для второй задачи
function secondTask() {
    // Пишем решение вот тут
    for (let i = 20; i >= 10; i--) {
        if (i === 13) break;  
        console.log(i);
    }
}
secondTask();
// Место для третьей задачи
function thirdTask() {
    // Пишем решение вот тут
    for (let i = 2; i <= 10; i++) {
    if (i % 2 === 0) { 
    console.log(i);
        }
    }
}
thirdTask();
// Место для четвертой задачи

// Цикл, который нужно переписать:
// for (let i = 2; i <= 16; i++) {
//     if (i % 2 === 0) {
//         continue;
//     } else {
//         console.log(i);
//     }
// }

function fourthTask() {
    // Пишем решение вот тут
let i = 2;
while (i < 16) {
    i++;
    if (i % 2 === 0) {continue} 
    else {console.log(i);}
    }
}
fourthTask();
// Место для пятой задачи
function fifthTask() {
   const arrayOfNumbers = [];
   // Пишем решение вот тут
   for (let i = 5; i <= 10; i++) {
   arrayOfNumbers[i - 5] = i;
   }
   console.log(arrayOfNumbers);
   // Не трогаем
   return arrayOfNumbers;
}
fifthTask();

// Task 4. (*) Продвинутые задания на использование циклов и условий

// 1) Заполните новый массив (result) числами из старого (arr). Количество элементов в массиве можно получить как arr.length, а к элементам обращаемся все так же: arr[0], arr[1] и тд. Должен получиться точно такой же массив.
// 2) Измените данный массив так, чтобы все числа были увеличены в 2 раза, а если попадается строка строка - то к ней было добавлено " - done".
// Для определения типа данных используйте typeof();
// Должно получиться: [ 10, 20, 'Shopping - done', 40, 'Homework - done' ]
// 3) Разверните массив data наоборот при помощи цикла и запишите данные в массив result.
// Должно получиться: [ 'Homework', 20, 'Shopping', 10, 5 ]

// Место для первой задачи
function firstTask() {
    // Значения массива менять нельзя, тут он проверяется автоматически именно на эти значения
    const arr = [3, 5, 8, 16, 20, 23, 50];
    const result = []; 
    for (let i = 0; i < arr.length; i++) {
        result[i] = arr[i]
    }
    // Пишем решение вот тут   
    console.log(result);
    // Не трогаем
    return result;
 }
 firstTask(); 
 // Место для второй задачи
 function secondTask() {
     // Значения массива менять нельзя, тут он проверяется автоматически именно на эти значения
     const data = [5, 10, 'Shopping', 20, 'Homework']; 
     // Пишем решение вот тут
     for (let i = 0; i < data.length; i++) {
         if (typeof(data[i]) === 'number') {
             data[i] = data[i] * 2
         } else if (typeof(data[i]) === 'string') {
             data[i] = `${data[i]} - done`
         }
     }
     console.log(data);
     // Не трогаем
     return data;
 }
 secondTask(); 
 // Место для третьей задачи
 function thirdTask() {
     const data = [5, 10, 'Shopping', 20, 'Homework'];
     const result = []; 
     for (let i = 1; i <= data.length; i++) {
         result[i - 1] = data[data.length - i]
     } 
     console.log(result);
     return result;
 } 
 thirdTask();

// Task 5. Задача на формирование фигуры

// Это одна из классических задач в программировании на формирование самых разных фигур при помощи кода. Вы спросите, а зачем это вообще нужно? Ответов несколько:
// Существуют реальные задачи, когда вы кодом строите геометрию, символы и другие нужные вещи. Вспомните простые электронные табло на улицах, например
// Это хорошо прокачивает логику и разминает мозг
// Позволяет запомнить нюансы работы языка
// Иногда можно встретить просто нереальные вещи, построенные только при помощи кода. Но мы с вами займемся базовой фигурой. Сейчас вам необходимо написать код, который при помощи звездочек (*) в консоли нарисует вот такую фигуру:
//      *
//     ***
//    *****
//   *******
//  *********
// ***********
// (Подсказка: в конце фигуры есть перенос строки \n, который тоже учитывается в тестах. В КОНЦЕ КАЖДОЙ СТРОКИ НЕТ ПРОБЕЛОВ, ТОЛЬКО ПЕРЕНОС)

const lines = 5;
let result = '';
for (let i = 0; i <= lines; i++) {
    for (let j = 0; j < lines - i; j++) {
        result += " ";
    }
    for (let j = 0; j < 2 * i + 1; j++) {
        result += "*";
    }
    result += "\n";
}
console.log(result);

// Task 6. Задание на работу с функциями

// 1) Создайте функцию, которая будет на вход принимать 1 аргумент с именем человека и возвращать строку.
// Пример: вызов функции sayHello('Антон') возвращает строку "Привет, Антон!". В решении вызывать функцию не нужно, программа сделает это за вас.
// P.S. возвращать - это использовать ключевое слово return.
// P.S.S. Это классическая функция-модификатор, которых мы дальше по курсу будем создавать еще много в разных видах.
// 2) Создайте функцию, которая принимает в себя 1 аргумент в виде целого числа и возвращает массив из трех чисел: одно на 1 меньше, сам аргумент, и число на 1 больше.
// Пример: вызов функции returnNeighboringNumbers(5) возвращает массив в виде [4, 5, 6].
// 3) Создайте функцию, которая будет принимать в себя 2 аргумента, оба числа. Первое число - это база, второе число - это сколько раз нужно будет повторить это число в прогрессии. (Смотри пример ниже). Функция должна возвращать строку (или число в особых случаях, о которых ниже), где эти числа идут по порядку, разделенные тремя дефисами "---". После последнего числа их не должно быть.
// Если второй аргумент не является числом, равен или меньше нуля - то возвращать просто первый аргумент. (Проверяем через оператор typeof)
// Примеры:
// Вызов функции getMathResult(5, 3) даст ответ 5---10---15
// Вызов функции getMathResult(3, 10) даст ответ 3---6---9---12---15---18---21---24---27---30
// Вызов функции getMathResult(10, 5) даст ответ 10---20---30---40---50
// Вызов функции getMathResult(10, '5') даст ответ 10
// Вызов функции getMathResult(10, 0) даст ответ 10
// Вызов функции getMathResult(20, -5) даст ответ 20
// Эта задача уже ближе к реальности, когда вам нужно учитывать и тип данных у аргументов, проверять их и продумывать логику работы внутри. Обратите внимание на прогрессию, она рассчитывается по простой формуле умножения. Если первый аргумент 5, а второй 3, то число повторяется 3 раза, каждый раз увеличиваясь на само себя. Это базовая математика, которая и нужна для работы в 95% случае на фронтенде.

// Место для первой задачи
function sayHello(name) {
    return `Привет, + ${name}!`;
}
// Место для второй задачи
function returnNeighboringNumbers(item) {
    return [item - 1, item, item + 1];
}
// Место для третьей задачи
function getMathResult(num, item) {
    if (typeof(item) !== 'number' || item <= 0) {
        return num;
    }
    let str = '';
    for (let i = 1; i <= item; i++) {
        if(i === item) {
            str += `${num * i}`;
        } else { str += `${num * i}---`}
    }
    return str;
}


// Task 7. Продвинутые задания на использование функций

// Создайте функцию, которая будет вычислять объем и площадь полной поверхности куба (тоже базовая математика, иногда используется в создании анимаций). Эта функция принимает в себя целое число со значением длины ребра куба. Ответ выведите в формате строки, который изображен в примерах.
// Если в функцию попал неправильный аргумент или вычислить значения невозможно - вернуть строку "При вычислении произошла ошибка"
// НЕ ИСПОЛЬЗУЙТЕ ОПЕРАТОР СТЕПЕНИ ** - в онлайн среде браузера он не работает и тесты будут ломаться. Это из-за того, что этот оператор из более нового стандарта, чем тут доступен.
// Примеры:
// calculateVolumeAndArea(5)  => 'Объем куба: 125, площадь всей поверхности: 150'
// calculateVolumeAndArea(15)  => 'Объем куба: 3375, площадь всей поверхности: 1350'
// calculateVolumeAndArea(15.5)  => 'При вычислении произошла ошибка'
// calculateVolumeAndArea('15')  => 'При вычислении произошла ошибка'
// calculateVolumeAndArea(-15)  => 'При вычислении произошла ошибка'
// 2) Постепенно переходим к более реалистичным задачам :) Вы обнаружите, что там используется все тоже самое.
// Напишите функцию, которая будет определять номер купе по переданному ей номеру места. Наглядно:
// Функция принимает только целое число от 1 до 36.
// Если переданный аргумент не число, отрицательное или дробное - возвращается сообщение:
// "Ошибка. Проверьте правильность введенного номера места"
// Если число 0 или больше 36, то сообщение: "Таких мест в вагоне не существует"
// Пример:
// getCoupeNumber(33)  => 9
// getCoupeNumber(7)  => 2
// getCoupeNumber(300)  => "Таких мест в вагоне не существует"
// getCoupeNumber(0)  => "Таких мест в вагоне не существует"
// getCoupeNumber(7.7)  => "Ошибка. Проверьте правильность введенного номера места"
// getCoupeNumber(-10)  => "Ошибка. Проверьте правильность введенного номера места"
// getCoupeNumber('Hello')  => "Ошибка. Проверьте правильность введенного номера места"
// Такая функция вполне реальна и может использоваться для формирования билетов, в том числе и визуально на сайтах. Конечно, там будет куда больше условий, но смысл остается таким же.

// Место для первой задачи
function calculateVolumeAndArea (length) { 
    if (typeof(length) !== 'number' || length < 0 || !Number.isInteger(length)) {
        return "При вычислении произошла ошибка";
    }
    let volume = 0,
        area = 0;        
    volume = length * length * length;
    area = 6 * (length * length);   
       return `Объем куба: ${volume}, площадь всей поверхности: ${area}`;
}
calculateVolumeAndArea(5);
// Место для второй задачи
function getCoupeNumber(vanSeat) {
  if (vanSeat === 0 || vanSeat > 36) {
     return "Таких мест в вагоне не существует";
  }
  if (typeof(vanSeat) !== 'number' || vanSeat < 0 || !Number.isInteger(vanSeat)) {
        return "Ошибка. Проверьте правильность введенного номера места";
    }  
  if (vanSeat < 5 && vanSeat >= 1) {
     return 1;
  } 
  if (vanSeat < 9 && vanSeat >= 5) {
   return 2;
  }  
  if (vanSeat < 13 && vanSeat >= 9) {
   return console.log(3);
  } 
  if (vanSeat < 17 && vanSeat >= 13) {
   return 4;
  }
  if (vanSeat < 21 && vanSeat >= 17) {
   return 5;
  } 
  if (vanSeat < 25 && vanSeat >= 21) {
   return 6;
  }
  if (vanSeat < 29 && vanSeat >= 25) {
   return 7;
  } 
  if (vanSeat < 33 && vanSeat >= 29) {
   return 8;
  }  
  if (vanSeat <= 36 && vanSeat >= 33) {
   return 9;
  }  
}

// Task 8. Продвинутые задания на использование функций

// Создайте функцию, которая принимает в себя целое число минут и возвращает время в нужном формате строки. (Смотри пример). Обратите внимание на окончание слова "час" - оно меняется в зависимости от цифры. Если вместо аргумента приходит не число, дробное или отрицательное число - функция возвращает строку "Ошибка, проверьте данные"
// Внимание! Давайте пока ограничимся максимум 600ю минутами (10 часов). Так как проверки на большие числа будут раздувать код (33 часа, 31 час, 11 часов и тд). Этого будет достаточно и код будет проверять именно этот промежуток (1 - 10 часов). Но вы можете реализовать и полный скрипт, он тоже должен проходить тесты.
// Пример:
// getTimeFromMinutes(150) => "Это 2 часа и 30 минут"
// getTimeFromMinutes(50) => "Это 0 часов и 50 минут"
// getTimeFromMinutes(0) => "Это 0 часов и 0 минут"
// getTimeFromMinutes(-150) => "Ошибка, проверьте данные"
// 2) Напишите функцию, которая принимает в себя 4 числа и возвращает самое большее из них. Если один из аргументов не является числом или их меньше 4 - возвращается 0. Дробные числа разрешены.
// Пример:
// findMaxNumber(1, 5, 6.6, 11); =>  11
// findMaxNumber(1, 5, '6', '10');  =>  0
// У этой задачи есть очень много вариантов решения, в том числе и встроенное в JS. Подходит любое :)

// Место для первой задачи
function getTimeFromMinutes(minutesTotal) {
    if (typeof(minutesTotal) !== 'number' || minutesTotal < 0 || !Number.isInteger(minutesTotal)) {
        return "Ошибка, проверьте данные";
    }
    const hours = Math.floor(minutesTotal / 60);
    const minutes = minutesTotal % 60;
    let hoursStr = '';
    switch (hours) {
        case 0: 
            hoursStr = 'часов';
            break;
        case 1:
            hoursStr = 'час';
            break;
        case 2:
        case 3:
        case 4:
            hoursStr = 'часа';
            break;
        default:
            hoursStr = 'часов';
    }
    return `Это ${hours} ${hoursStr} и ${minutes} минут`;
}
getTimeFromMinutes(327)
// Место для второй задачи
   function findMaxNumber(a, b, c, d) {
      if (typeof(a) == 'number' && typeof(b) == 'number' && typeof(c) == 'number' && typeof(d) == 'number' && a && b && c && d) {
         return Math.max(a, b, c, d);
      } else { return 0}
   }


// Task 9. Задача с собеседований на числа Фибоначчи

// Это одна из классических задач в программировании на самых разных языках. Скорее всего вы слышали про числа Фибоначчи, где первые два числа равны 0 и 1, а каждое последующее число равно сумме двух предыдущих чисел. И на собеседованиях часто дают задачи, связанные с этими числами. Есть разные вариации и тут мы попробуем решить одну из них.
// Сразу скажу, что есть варианты решения через прием, называемый рекурсия. Он дальше по курсу. Но этот вариант нужно решить без её применения. Такие условия часто ставят на собеседованиях. Когда вы пройдете урок по рекурсии, вы можете вернуться в это задание и попробовать решить по другому. Так же подсказку (но не решение этой задачи) можно найти тут. Но постарайтесь не открывать 🙂
// Задача:
// Создайте функцию, которая будет принимать в себя один аргумент-целое положительное число. Она должна возвращать строку, в которой будут через пробел выведены числа Фибоначчи. Причем, их количество должно быть равно переданному аргументу.
// Если переданный аргумент не число - вернуть пустую строку. Решать без применения рекурсии.
// Пример:
// fib(4) => ''0 1 1 2"
// fib(7) => ''0 1 1 2 3 5 8"
// fib('7') => ''"
// fib(1) => "0"
// fib(0) => ''"
// Задача непростая для новичков, так что с первого раза может не получится.

function fib(n) {
    if (typeof(n) !== 'number' || n <= 0 || !Number.isInteger(n)) {
       return "";
    }
    let strFib = "";
    let a = 0;
    let b = 1;
    for (let i = 0; i < n; i++) {      
    if (i + 1 === n) {
       strFib += `${a}`;
    } else {
       strFib += `${a} `;
    }
      let c = a + b;
      a = b;
      b = c;
    }
    return strFib;
  }
  fib(5);


//   Task 10. Задачи на работу с объектами

// 1) Напишите функцию showExperience, которая будет принимать в себя объект со всеми данными и возвращать строку с опытом.
// Пример:
// showExperience(personalPlanPeter) => '1 month'
// P.S. желательно использовать деструктуризацию, но не обязательно
// 2) Напишите функцию showProgrammingLangs, которая будет принимать в себя объект со всеми данными и возвращать строку в нужном виде.
// Пример:
// showProgrammingLangs(personalPlanPeter)  =>
// "Язык js изучен на 20% Язык php изучен на 10%"
// Причем функция должна работать вне зависимости от количества языков. Если ни один не указан, то возвращается пустая строка.
// P.S. Для переноса строки используется \n в конце строки.
// 3) Создайте метод showAgeAndLangs внутри объекта personalPlanPeter. При его вызове метод будет принимать в себя объект и возвращать строку в нужном виде.
// Пример:
// personalPlanPeter.showAgeAndLangs(personalPlanPeter)
// => 'Мне 29 и я владею языками: RU ENG'
// Заметьте, что возраст и языки подставляются автоматически из объекта, а языки всегда в верхнем регистре (большими буквами). Если данные в объекте поменяются, то и сообщение тоже изменится.
// P.S. Дальше по курсу мы научимся удобно обращаться из метода к самому объекту, в котором он расположен. Но пока делаем это менее удобным способом)

const personalPlanPeter = {
    name: "Peter",
    age: "29",
    skills: {
        languages: ['ru', 'eng'],
        programmingLangs: {
            js: '20%',
            php: '10%'
        },
        exp: '1 month'
    },
    showAgeAndLangs: function(plan) {
        const {age} = plan;
        const {languages} = plan.skills;
        let str = `Мне ${age} и я владею языками: `;

        languages.forEach(function(lang) {
            str += `${lang.toUpperCase()} `;
        });
        return str;
    }
};    
function showExperience(plan) {   
    const {exp} = plan.skills;
    return exp;
}
function showProgrammingLangs(plan) {
    let str = '';
    const {programmingLangs} = plan.skills;
    for (let key in programmingLangs) {
        str += `Язык ${key} изучен на ${programmingLangs[key]}\n`
    }
    return str;
}
showProgrammingLangs(personalPlanPeter);



